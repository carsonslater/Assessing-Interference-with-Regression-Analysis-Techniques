---
title: "Predicting Aggregate Interference"
author: "Carson Slater"
format: pdf
editor: visual
---

```{r setup}
#| echo: false
knitr::opts_chunk$set(
  collapse = TRUE, comment = "#"
)
```

```{r packages}
#| include: false
#| echo: false
library("tidymodels"); theme_set(theme_bw() + 
                                   theme(panel.border = element_blank(), 
                                         panel.grid.major = element_blank(),
                                         panel.grid.minor = element_blank(), 
                                         axis.line = element_line(colour = "black")))
library("parsnip")
library("recipes")
library("knitr")
library("latex2exp")
```


## Data Preparation and EDA

The following code is a consolidation of all the research that went into this paper.

#### Data Preparation
```{r loading the data}
tuning_data <- read.csv(here::here("Data", "MamdaniTuningData_1-6.csv"),
                         header = TRUE)

distance <- as.vector(as.matrix(tuning_data[ ,c("tx1_distance",
                                                  "tx2_distance",
                                                  "tx3_distance")]))

input_psd <- as.vector(as.matrix(tuning_data[ ,c("tx1_psd",
                                                  "tx2_psd",
                                                  "tx3_psd")]))

scaled_psd <- as.vector(as.matrix(tuning_data[ ,c("tx1_scaled_psd",
                                                   "tx2_scaled_psd",
                                                   "tx3_scaled_psd")]))

aggregate_data <- cbind.data.frame(rep(tuning_data$rad_loc_idx, 3),
                                    distance,
                                    input_psd,
                                    scaled_psd)
```

We found it difficult to find real-world data for this kind of problem, so we have simulated data. To make our model robust, we decided to simulate random noise in our outcome of interest, `scaled_psd` (recieved power spectral density). We opted to assume a gaussian probability distribution with a mean of zero and a priori illicited variance. So to find the variance, we know the noise density (variance) at room temp is
-174 dBm/Hz. We can convert to dBW/200MHz by using the following formula
$$\sqrt{|-174 + 10\log_{10}(2\times10^8) - 30|} = 10.99953$$. We take the square root of the absolute value and then we have the standard deviation to parameterize the distribution of noise for the outcome of interest. So the noise is $\mathcal{N}(0, 10.99)$.

```{r}
# generating potential transformations for the `distance` variable
# see analyis2.R for other transformations we tried
aggregate_data <- aggregate_data |> 
  mutate(transform5 = distance^(-1/1000))

# adding noise
set.seed(613)

sigma <- sqrt(abs(-174 + 10*log10(200e6) - 30))

noise <- rnorm(nrow(aggregate_data), 0, sigma)

aggregate_data_noise <- aggregate_data

aggregate_data_noise$scaled_psd <- aggregate_data_noise$scaled_psd + noise
```

#### Data Visualization
In this our exploratory data analysis, I observed there is a non-linear relationship between `distance` and the `scaled_psd`.

```{r}
# no noise
aggregate_data |> 
  ggplot(aes(distance, scaled_psd)) +
  geom_point(alpha = 0.03) +
  labs(title = "Recieved PSD Over Distance with Noise (All Input PSD)") +
  xlab(TeX("Distance$^{-0.001}$")) +
  ylab("Recieved PSD")

# jitter (noise) added
aggregate_data_noise |> 
  ggplot(aes(distance, scaled_psd)) +
  geom_point(alpha = 0.03) +
  labs(title = "Recieved PSD Over Distance with Noise (All Input PSD)") +
  xlab("Distance") +
  ylab("Recieved PSD")

# no noise + transformed distance
aggregate_data |> 
  ggplot(aes(transform5, scaled_psd)) +
  geom_point(alpha = 0.03) +
  labs(title = TeX("Recieved PSD Over Distance$^{-0.001}$ (All Input PSD)")) +
  xlab(TeX("Distance$^{-0.001}$")) +
  ylab("Recieved PSD")

# noise + transformed distance
aggregate_data_noise |> 
  ggplot(aes(distance, scaled_psd)) +
  geom_point(alpha = 0.03) +
  labs(title = TeX("Recieved PSD Over Distance$^{-0.001}$ (All Input PSD)")) +
  xlab(TeX("Distance$^{-0.001}$")) +
  ylab("Recieved PSD")
```

